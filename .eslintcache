[{"D:\\search\\pagination\\src\\index.js":"1","D:\\search\\pagination\\src\\App.js":"2","D:\\search\\pagination\\src\\reportWebVitals.js":"3","D:\\search\\pagination\\src\\component\\Search.js":"4"},{"size":500,"mtime":1612083541217,"results":"5","hashOfConfig":"6"},{"size":242,"mtime":1612177566654,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":2863,"mtime":1612239076596,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"ry0tvc",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\search\\pagination\\src\\index.js",[],["20","21"],"D:\\search\\pagination\\src\\App.js",[],"D:\\search\\pagination\\src\\reportWebVitals.js",[],"D:\\search\\pagination\\src\\component\\Search.js",["22","23","24"],"import React, { useState } from 'react';\r\nimport './search.css';\r\n\r\nconst Search = (props) =>{\r\n    const [searchTerm,setSearchTerm] = useState(\"\");\r\n    const [post,setPost] = useState(props.data.items);\r\n    const [incr,setIncr] = useState(0);\r\n    const [sort,setSort] = useState({\r\n        value:props.data.items\r\n      })\r\n\r\n     \r\n      \r\n      const sortHandler = () =>{\r\n        setSort({value:props.data.items.sort((a,b) =>{\r\n          return(\r\n              new Date(a.pubDate) - new Date(b.pubDate)\r\n          )\r\n      })})\r\n      }\r\n      const titleHandler = () =>{\r\n        setSort({value:props.data.items.sort((a,b) =>{\r\n            return a.title.localeCompare(b.title)\r\n            })})\r\n      }\r\n\r\n    return(\r\n        <div >\r\n        <div className=\"header\">\r\n        <input \r\n        type=\"text\"\r\n        placeholder=\"search...\"\r\n        onChange={(event)=>{\r\n            setSearchTerm(event.target.value)\r\n        }}\r\n        />\r\n        </div>\r\n        <div  className=\"container\">\r\n        <table className=\"styled-table\">\r\n<thead>\r\n<tr>\r\n<th>images</th>\r\n<th>\r\n<select onChange={titleHandler}>\r\n<option value=\"desc\">Title(Z - A)</option>\r\n<option value=\"asc\">Title(A - Z)</option>\r\n</select>\r\n\r\n</th>\r\n<th>\r\n<select  onClick={sortHandler} >\r\n  <option>Date(incresing order)</option>\r\n  <option >2</option>\r\n  <option>3</option>\r\n  </select>\r\n</th>\r\n<th>description</th>\r\n</tr>\r\n</thead>\r\n\r\n        \r\n        {sort.value.filter((val) =>{\r\n             if(searchTerm === \"\"){\r\n                 return val\r\n             }\r\n             else if(val.title.toLowerCase().includes(searchTerm.toLowerCase())){\r\n                 return val\r\n             }\r\n             else if(val.description.toLowerCase().includes(searchTerm.toLowerCase())){\r\n                return val\r\n            }\r\n            \r\n        })\r\n        \r\n        \r\n        .slice(incr,incr+6).map((post,key) =>{\r\n             return(\r\n                <tbody className=\"user\" key={key}>\r\n                <tr>\r\n                <td>\r\n                <a href={post.link} target=\"blank\">\r\n                <img src={post.thumbnail} width=\"100\" height=\"100\" alt='image'/>\r\n                </a>\r\n                \r\n                </td>\r\n                <td>{post.title}</td>\r\n                <td>{post.pubDate} </td>\r\n                <td>{post.description}</td>\r\n                </tr>\r\n                 </tbody>\r\n             )\r\n        })}\r\n        </table>\r\n        <div className=\"pagination\">\r\n        {(incr>0) ? <button onClick={() => setIncr(incr-6)}>previous</button> : null }\r\n  \r\n        <button onClick={() => setIncr(0)}>1</button>\r\n        <button onClick={() => setIncr(3)}>2</button>\r\n      \r\n       {(post.length-5 > incr) ? <button onClick={() => setIncr(incr+6)}>next</button> : null }\r\n       </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":6,"column":17,"nodeType":"31","messageId":"32","endLine":6,"endColumn":24},{"ruleId":"33","severity":1,"message":"34","line":62,"column":34,"nodeType":"35","messageId":"36","endLine":62,"endColumn":36},{"ruleId":"37","severity":1,"message":"38","line":82,"column":17,"nodeType":"39","endLine":82,"endColumn":81},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'setPost' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]